plugins {
    id 'java'
    id 'application'
}

group = 'las2peer-web-connector'
archivesBaseName = group
version = "${project.property('las2peer.version')}"
sourceCompatibility = "${project.property('java.version')}"
targetCompatibility = "${project.property('java.version')}"

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()

    // DBIS Archiva
    maven {
        url "https://archiva.dbis.rwth-aachen.de:9911/repository/internal/"
    }
}

compileJava {
    options.compilerArgs += ["-XDignore.symbol.file",
    "--add-exports", "java.base/sun.security.provider=ALL-UNNAMED",
    "--add-exports", "java.base/sun.security.tools.keytool=ALL-UNNAMED",
    "--add-exports", "java.base/sun.security.util=ALL-UNNAMED",
    "--add-exports", "java.base/sun.security.x509=ALL-UNNAMED"]
    options.fork = true
    options.forkOptions.executable = "javac"
}

dependencies {
    // Use JUnit test framework.
    testImplementation "junit:junit:${project.property('junit.version')}"

    compile project(":restmapper")

    implementation "com.nimbusds:oauth2-oidc-sdk:4.17"
    implementation "org.glassfish.jersey.containers:jersey-container-jdk-http:${project.property('jersey.version')}"
    implementation "net.minidev:json-smart:2.3"
    implementation "org.webjars:swagger-ui:3.6.1"
    implementation "javax.xml.bind:jaxb-api:2.3.1"
    implementation "org.glassfish.jersey.inject:jersey-hk2:${project.property('jersey.version')}"
}

// put all .jar files into export/jars folder
tasks.withType(Jar) {
    destinationDir = file("$projectDir/export/jars")
}

compileTestJava {
    dependsOn "copyTest"
}

// Copies files like .xml files into build directory
task copyTest(type: Copy) {
    from "src/test/java"
    exclude "**/*.java"
    exclude "*.java"
    into "$buildDir/classes/java/test"
}

jar {
    dependsOn "buildFrontend"
}

// building frontend is not yet working
task buildFrontend(type: Exec) {
    description = "Installs dependencies from package.json"
    
    dependsOn "npmInstall"
    dependsOn "npmBuild"
    dependsOn "fixWebapp"
}

// TODO: replace version number in frontend statusbar 
//task setVersionInStatusbar()

task npmInstall(type: Exec) {
    workingDir = file("${project.projectDir}/frontend")

    executable = "npm"
    args "install", "--production"
}

task npmBuild(type: Exec) {
    dependsOn "npmInstall"

    workingDir = file("${project.projectDir}/frontend")

    executable = "npm"
    args "run", "build"
}

task fixWebapp(type: Exec) {
    dependsOn "npmBuild"

    executable = "/bin/bash"
    args "${project.projectDir}/fix_symlink.sh"
}

/*task fixWebapp(type: Copy) {
    from "${project.projectDir}/frontend/build/es6-bundled"
    into "${project.projectDir}/resources/webapp"
}*/