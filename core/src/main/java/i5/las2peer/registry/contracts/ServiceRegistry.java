package i5.las2peer.registry.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class ServiceRegistry extends Contract {
    private static final String BINARY = "0x608060405234801561001057600080fd5b50604051602080612dc58339810180604052602081101561003057600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050612d34806100916000396000f3fe6080604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806309cf8201146100d55780630a790eb7146102e95780630b0e7f15146103a45780630cbc2a151461048057806317c523d41461060957806335341fb4146106e95780635c7460d614610750578063656afdee146107a7578063af9e5cf614610879578063bddbd3a71461095f578063daf7b15514610b73578063df97541814610cf0578063e193070014610da4578063ea23ea2b14610f2b575b600080fd5b3480156100e157600080fd5b506102e7600480360360c08110156100f857600080fd5b810190808035906020019064010000000081111561011557600080fd5b82018360208201111561012757600080fd5b8035906020019184600183028401116401000000008311171561014957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156101ac57600080fd5b8201836020820111156101be57600080fd5b803590602001918460018302840111640100000000831117156101e057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561026157600080fd5b82018360208201111561027357600080fd5b8035906020019184600183028401116401000000008311171561029557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061116a565b005b3480156102f557600080fd5b506103226004803603602081101561030c57600080fd5b8101908080359060200190929190505050611346565b6040518080602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561036857808201518184015260208101905061034d565b50505050905090810190601f1680156103955780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156103b057600080fd5b5061046a600480360360208110156103c757600080fd5b81019080803590602001906401000000008111156103e457600080fd5b8201836020820111156103f657600080fd5b8035906020019184600183028401116401000000008311171561041857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611402565b6040518082815260200191505060405180910390f35b34801561048c57600080fd5b50610607600480360360808110156104a357600080fd5b81019080803590602001906401000000008111156104c057600080fd5b8201836020820111156104d257600080fd5b803590602001918460018302840111640100000000831117156104f457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561058157600080fd5b82018360208201111561059357600080fd5b803590602001918460018302840111640100000000831117156105b557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061147f565b005b34801561061557600080fd5b506106cf6004803603602081101561062c57600080fd5b810190808035906020019064010000000081111561064957600080fd5b82018360208201111561065b57600080fd5b8035906020019184600183028401116401000000008311171561067d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506118e9565b604051808215151515815260200191505060405180910390f35b3480156106f557600080fd5b5061072c6004803603604081101561070c57600080fd5b810190808035906020019092919080359060200190929190505050611916565b60405180848152602001838152602001828152602001935050505060405180910390f35b34801561075c57600080fd5b5061076561195c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107b357600080fd5b50610877600480360360408110156107ca57600080fd5b81019080803590602001906401000000008111156107e757600080fd5b8201836020820111156107f957600080fd5b8035906020019184600183028401116401000000008311171561081b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050611981565b005b34801561088557600080fd5b5061095d6004803603608081101561089c57600080fd5b81019080803590602001906401000000008111156108b957600080fd5b8201836020820111156108cb57600080fd5b803590602001918460018302840111640100000000831117156108ed57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019092919080359060200190929190505050611b26565b005b34801561096b57600080fd5b50610b71600480360360c081101561098257600080fd5b810190808035906020019064010000000081111561099f57600080fd5b8201836020820111156109b157600080fd5b803590602001918460018302840111640100000000831117156109d357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610a3657600080fd5b820183602082011115610a4857600080fd5b80359060200191846001830284011164010000000083111715610a6a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190803590602001909291908035906020019092919080359060200190640100000000811115610aeb57600080fd5b820183602082011115610afd57600080fd5b80359060200191846001830284011164010000000083111715610b1f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611c26565b005b348015610b7f57600080fd5b50610cee600480360360a0811015610b9657600080fd5b8101908080359060200190640100000000811115610bb357600080fd5b820183602082011115610bc557600080fd5b80359060200191846001830284011164010000000083111715610be757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190803590602001909291908035906020019092919080359060200190640100000000811115610c6857600080fd5b820183602082011115610c7a57600080fd5b80359060200191846001830284011164010000000083111715610c9c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611e02565b005b348015610cfc57600080fd5b50610d2960048036036020811015610d1357600080fd5b8101908080359060200190929190505050611f70565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d69578082015181840152602081019050610d4e565b50505050905090810190601f168015610d965780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610db057600080fd5b50610f29600480360360c0811015610dc757600080fd5b8101908080359060200190640100000000811115610de457600080fd5b820183602082011115610df657600080fd5b80359060200191846001830284011164010000000083111715610e1857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190640100000000811115610ea357600080fd5b820183602082011115610eb557600080fd5b80359060200191846001830284011164010000000083111715610ed757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612028565b005b348015610f3757600080fd5b506111686004803603610100811015610f4f57600080fd5b8101908080359060200190640100000000811115610f6c57600080fd5b820183602082011115610f7e57600080fd5b80359060200191846001830284011164010000000083111715610fa057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291908035906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561102b57600080fd5b82018360208201111561103d57600080fd5b8035906020019184600183028401116401000000008311171561105f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156110e257600080fd5b8201836020820111156110f457600080fd5b8035906020019184600183028401116401000000008311171561111657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506121d5565b005b8560006001026001600061117d84611402565b81526020019081526020016000206001015414151515611205576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f53657276696365206d75737420626520726567697374657265642e000000000081525060200191505060405180910390fd5b600061121088611402565b9050807feab4e2e4c52c208cb1ee041fd1151e46f2c1847fce1f4ef741bf3bfe77536e29888888888842604051808060200187815260200186815260200185815260200180602001848152602001838103835289818151815260200191508051906020019080838360005b8381101561129657808201518184015260208101905061127b565b50505050905090810190601f1680156112c35780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156112fc5780820151818401526020810190506112e1565b50505050905090810190601f1680156113295780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a25050505050505050565b6001602052806000526040600020600091509050806000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113f25780601f106113c7576101008083540402835291602001916113f2565b820191906000526020600020905b8154815290600101906020018083116113d557829003601f168201915b5050505050908060010154905082565b6000816040516020018082805190602001908083835b60208310151561143d5780518252602082019150602081019050602083039250611418565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050919050565b60606040805190810160405280600481526020017f656afdee000000000000000000000000000000000000000000000000000000008152509050606085856040516020018080602001838152602001828103825284818151815260200191508051906020019080838360005b838110156115065780820151818401526020810190506114eb565b50505050905090810190601f1680156115335780820380516001836020036101000a031916815260200191505b509350505050604051602081830303815290604052905073__Delegation____________________________63a491459d838387876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001848103845288818151815260200191508051906020019080838360005b8381101561160d5780820151818401526020810190506115f2565b50505050905090810190601f16801561163a5780820380516001836020036101000a031916815260200191505b50848103835287818151815260200191508051906020019080838360005b83811015611673578082015181840152602081019050611658565b50505050905090810190601f1680156116a05780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156116d95780820151818401526020810190506116be565b50505050905090810190601f1680156117065780820380516001836020036101000a031916815260200191505b5097505050505050505060006040518083038186803b15801561172857600080fd5b505af415801561173c573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e96b462a85876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b15801561180257600080fd5b505afa158015611816573d6000803e3d6000fd5b505050506040513d602081101561182c57600080fd5b810190808051906020019092919050505015156118d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f5369676e6572206d757374206f776e20617574686f72206e616d6520746f207281526020017f6567697374657220736572766963652e0000000000000000000000000000000081525060400191505060405180910390fd5b6118e186866126cc565b505050505050565b600080600102600160006118fc85611402565b815260200190815260200160002060010154149050919050565b60026020528160005260406000208181548110151561193157fe5b9060005260206000209060030201600091509150508060000154908060010154908060020154905083565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e96b462a33836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b158015611a4357600080fd5b505afa158015611a57573d6000803e3d6000fd5b505050506040513d6020811015611a6d57600080fd5b81019080805190602001909291905050501515611b18576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001807f53656e646572206d757374206f776e20617574686f72206e616d6520746f207281526020017f6567697374657220736572766963652e0000000000000000000000000000000081525060400191505060405180910390fd5b611b2282826126cc565b5050565b83600060010260016000611b3984611402565b81526020019081526020016000206001015414151515611bc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f53657276696365206d75737420626520726567697374657265642e000000000081525060200191505060405180910390fd5b6000611bcc86611402565b9050807fff6948f18e56e7efd1cea78438d00f22631e5e3edfdcdce560b0b75ec01b078b868686426040518085815260200184815260200183815260200182815260200194505050505060405180910390a2505050505050565b85600060010260016000611c3984611402565b81526020019081526020016000206001015414151515611cc1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f53657276696365206d75737420626520726567697374657265642e000000000081525060200191505060405180910390fd5b6000611ccc88611402565b9050807f488efddc026b80be7290e78ebae8f6804d46e82cf6cbb8fce219d6f1239ed9e3888888888842604051808060200187815260200186815260200185815260200180602001848152602001838103835289818151815260200191508051906020019080838360005b83811015611d52578082015181840152602081019050611d37565b50505050905090810190601f168015611d7f5780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b83811015611db8578082015181840152602081019050611d9d565b50505050905090810190601f168015611de55780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390a25050505050505050565b84600060010260016000611e1584611402565b81526020019081526020016000206001015414151515611e9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f53657276696365206d75737420626520726567697374657265642e000000000081525060200191505060405180910390fd5b6000611ea887611402565b9050807f40f7f78f4da5ac433d91a5d250c56421d65e368aa5aa0a58a85cd82b8c3a9e3787878787426040518086815260200185815260200184815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015611f29578082015181840152602081019050611f0e565b50505050905090810190601f168015611f565780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a250505050505050565b6060600160008381526020019081526020016000206000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561201c5780601f10611ff15761010080835404028352916020019161201c565b820191906000526020600020905b815481529060010190602001808311611fff57829003601f168201915b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e96b462a33876040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b1580156120ea57600080fd5b505afa1580156120fe573d6000803e3d6000fd5b505050506040513d602081101561211457600080fd5b810190808051906020019092919050505015156121bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f53656e646572206d757374206f776e20617574686f72206e616d6520746f207281526020017f656c656173652e0000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6121cd868686868686612924565b505050505050565b60606040805190810160405280600481526020017fe19307000000000000000000000000000000000000000000000000000000000081525090506060898989898989604051602001808060200187815260200186815260200185815260200184815260200180602001838103835289818151815260200191508051906020019080838360005b8381101561227657808201518184015260208101905061225b565b50505050905090810190601f1680156122a35780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156122dc5780820151818401526020810190506122c1565b50505050905090810190601f1680156123095780820380516001836020036101000a031916815260200191505b5098505050505050505050604051602081830303815290604052905073__Delegation____________________________63a491459d838387876040518563ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001806020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001848103845288818151815260200191508051906020019080838360005b838110156123e85780820151818401526020810190506123cd565b50505050905090810190601f1680156124155780820380516001836020036101000a031916815260200191505b50848103835287818151815260200191508051906020019080838360005b8381101561244e578082015181840152602081019050612433565b50505050905090810190601f16801561247b5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156124b4578082015181840152602081019050612499565b50505050905090810190601f1680156124e15780820380516001836020036101000a031916815260200191505b5097505050505050505060006040518083038186803b15801561250357600080fd5b505af4158015612517573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e96b462a858b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060206040518083038186803b1580156125dd57600080fd5b505afa1580156125f1573d6000803e3d6000fd5b505050506040513d602081101561260757600080fd5b810190808051906020019092919050505015156126b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f5369676e6572206d757374206f776e20617574686f72206e616d6520746f207281526020017f656c656173652e0000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6126c08a8a8a8a8a8a612924565b50505050505050505050565b816126e66020604051908101604052806000815250611402565b6126ef82611402565b14151515612765576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f537472696e67206d757374206265206e6f6e2d7a65726f2e000000000000000081525060200191505060405180910390fd5b8160006001028114151515612808576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f576861746576657220746869732069732c206974206d757374206265206e6f6e81526020017f2d7a65726f2e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b612811846118e9565b1515612885576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f53657276696365206e616d6520616c72656164792074616b656e2e000000000081525060200191505060405180910390fd5b600061289085611402565b90506040805190810160405280868152602001858152506001600083815260200190815260200160002060008201518160000190805190602001906128d6929190612c63565b506020820151816001015590505083817fdbcd7b865e4bbd2885b269251a7a2ac22db95d1479bdba1ebffdd9b0f14c1f15426040518082815260200191505060405180910390a35050505050565b8561293e6020604051908101604052806000815250611402565b61294782611402565b141515156129bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f537472696e67206d757374206265206e6f6e2d7a65726f2e000000000000000081525060200191505060405180910390fd5b8560006001028114151515612a60576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f576861746576657220746869732069732c206974206d757374206265206e6f6e81526020017f2d7a65726f2e000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000612a6b89611402565b9050876001600083815260200190815260200160002060010154141515612b20576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001807f50617373656420617574686f7220646f6573206e6f74206f776e20736572766981526020017f63652e000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b600260008281526020019081526020016000206060604051908101604052808981526020018881526020018781525090806001815401808255809150509060018203906000526020600020906003020160009091929091909150600082015181600001556020820151816001015560408201518160020155505050807ffe3ffc15bade6f3ec6539c01fd0de509fd35fea0b61cee9c50a2988abb22c76f88888888426040518086815260200185815260200184815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b83811015612c1a578082015181840152602081019050612bff565b50505050905090810190601f168015612c475780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a2505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612ca457805160ff1916838001178555612cd2565b82800160010185558215612cd2579182015b82811115612cd1578251825591602001919060010190612cb6565b5b509050612cdf9190612ce3565b5090565b612d0591905b80821115612d01576000816000905550600101612ce9565b5090565b9056fea165627a7a723058207fba8ad4060638f248a779bb3995e1a5a3f35b3e030339e26a42579ab5c7cd300029";

    public static final String FUNC_SERVICES = "services";

    public static final String FUNC_SERVICEVERSIONS = "serviceVersions";

    public static final String FUNC_USERREGISTRY = "userRegistry";

    public static final String FUNC_STRINGHASH = "stringHash";

    public static final String FUNC_NAMEISAVAILABLE = "nameIsAvailable";

    public static final String FUNC_HASHTONAME = "hashToName";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_DELEGATEDREGISTER = "delegatedRegister";

    public static final String FUNC_RELEASE = "release";

    public static final String FUNC_DELEGATEDRELEASE = "delegatedRelease";

    public static final String FUNC_ANNOUNCEDEPLOYMENT = "announceDeployment";

    public static final String FUNC_ANNOUNCECLUSTERDEPLOYMENT = "announceClusterDeployment";

    public static final String FUNC_ANNOUNCECLUSTERDEPLOYMENTEND = "announceClusterDeploymentEnd";

    public static final String FUNC_ANNOUNCEDEPLOYMENTEND = "announceDeploymentEnd";

    public static final Event SERVICECREATED_EVENT = new Event("ServiceCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SERVICERELEASED_EVENT = new Event("ServiceReleased", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SERVICEDEPLOYMENT_EVENT = new Event("ServiceDeployment", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CLUSTERSERVICEDEPLOYMENT_EVENT = new Event("ClusterServiceDeployment", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CLUSTERSERVICEDEPLOYMENTEND_EVENT = new Event("ClusterServiceDeploymentEnd", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SERVICEDEPLOYMENTEND_EVENT = new Event("ServiceDeploymentEnd", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected ServiceRegistry(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ServiceRegistry(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ServiceRegistry(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ServiceRegistry(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteCall<Tuple2<String, byte[]>> services(byte[] param0) {
        final Function function = new Function(FUNC_SERVICES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Bytes32>() {}));
        return new RemoteCall<Tuple2<String, byte[]>>(
                new Callable<Tuple2<String, byte[]>>() {
                    @Override
                    public Tuple2<String, byte[]> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, byte[]>(
                                (String) results.get(0).getValue(), 
                                (byte[]) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>> serviceVersions(byte[] param0, BigInteger param1) {
        final Function function = new Function(FUNC_SERVICEVERSIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0), 
                new org.web3j.abi.datatypes.generated.Uint256(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple3<BigInteger, BigInteger, BigInteger>>(
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<String> userRegistry() {
        final Function function = new Function(FUNC_USERREGISTRY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public List<ServiceCreatedEventResponse> getServiceCreatedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SERVICECREATED_EVENT, transactionReceipt);
        ArrayList<ServiceCreatedEventResponse> responses = new ArrayList<ServiceCreatedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ServiceCreatedEventResponse typedResponse = new ServiceCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nameHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.author = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ServiceCreatedEventResponse> serviceCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ServiceCreatedEventResponse>() {
            @Override
            public ServiceCreatedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SERVICECREATED_EVENT, log);
                ServiceCreatedEventResponse typedResponse = new ServiceCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.nameHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.author = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ServiceCreatedEventResponse> serviceCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SERVICECREATED_EVENT));
        return serviceCreatedEventFlowable(filter);
    }

    public List<ServiceReleasedEventResponse> getServiceReleasedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SERVICERELEASED_EVENT, transactionReceipt);
        ArrayList<ServiceReleasedEventResponse> responses = new ArrayList<ServiceReleasedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ServiceReleasedEventResponse typedResponse = new ServiceReleasedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nameHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.versionMajor = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.versionMinor = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.versionPatch = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ServiceReleasedEventResponse> serviceReleasedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ServiceReleasedEventResponse>() {
            @Override
            public ServiceReleasedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SERVICERELEASED_EVENT, log);
                ServiceReleasedEventResponse typedResponse = new ServiceReleasedEventResponse();
                typedResponse.log = log;
                typedResponse.nameHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.versionMajor = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.versionMinor = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.versionPatch = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ServiceReleasedEventResponse> serviceReleasedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SERVICERELEASED_EVENT));
        return serviceReleasedEventFlowable(filter);
    }

    public List<ServiceDeploymentEventResponse> getServiceDeploymentEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SERVICEDEPLOYMENT_EVENT, transactionReceipt);
        ArrayList<ServiceDeploymentEventResponse> responses = new ArrayList<ServiceDeploymentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ServiceDeploymentEventResponse typedResponse = new ServiceDeploymentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nameHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.className = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.versionMajor = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.versionMinor = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.versionPatch = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.nodeId = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ServiceDeploymentEventResponse> serviceDeploymentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ServiceDeploymentEventResponse>() {
            @Override
            public ServiceDeploymentEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SERVICEDEPLOYMENT_EVENT, log);
                ServiceDeploymentEventResponse typedResponse = new ServiceDeploymentEventResponse();
                typedResponse.log = log;
                typedResponse.nameHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.className = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.versionMajor = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.versionMinor = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.versionPatch = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.nodeId = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ServiceDeploymentEventResponse> serviceDeploymentEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SERVICEDEPLOYMENT_EVENT));
        return serviceDeploymentEventFlowable(filter);
    }

    public List<ClusterServiceDeploymentEventResponse> getClusterServiceDeploymentEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CLUSTERSERVICEDEPLOYMENT_EVENT, transactionReceipt);
        ArrayList<ClusterServiceDeploymentEventResponse> responses = new ArrayList<ClusterServiceDeploymentEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClusterServiceDeploymentEventResponse typedResponse = new ClusterServiceDeploymentEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nameHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.versionMajor = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.versionMinor = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.versionPatch = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClusterServiceDeploymentEventResponse> clusterServiceDeploymentEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ClusterServiceDeploymentEventResponse>() {
            @Override
            public ClusterServiceDeploymentEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CLUSTERSERVICEDEPLOYMENT_EVENT, log);
                ClusterServiceDeploymentEventResponse typedResponse = new ClusterServiceDeploymentEventResponse();
                typedResponse.log = log;
                typedResponse.nameHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.versionMajor = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.versionMinor = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.versionPatch = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.hash = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ClusterServiceDeploymentEventResponse> clusterServiceDeploymentEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLUSTERSERVICEDEPLOYMENT_EVENT));
        return clusterServiceDeploymentEventFlowable(filter);
    }

    public List<ClusterServiceDeploymentEndEventResponse> getClusterServiceDeploymentEndEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CLUSTERSERVICEDEPLOYMENTEND_EVENT, transactionReceipt);
        ArrayList<ClusterServiceDeploymentEndEventResponse> responses = new ArrayList<ClusterServiceDeploymentEndEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClusterServiceDeploymentEndEventResponse typedResponse = new ClusterServiceDeploymentEndEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nameHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.versionMajor = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.versionMinor = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.versionPatch = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClusterServiceDeploymentEndEventResponse> clusterServiceDeploymentEndEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ClusterServiceDeploymentEndEventResponse>() {
            @Override
            public ClusterServiceDeploymentEndEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CLUSTERSERVICEDEPLOYMENTEND_EVENT, log);
                ClusterServiceDeploymentEndEventResponse typedResponse = new ClusterServiceDeploymentEndEventResponse();
                typedResponse.log = log;
                typedResponse.nameHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.versionMajor = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.versionMinor = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.versionPatch = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ClusterServiceDeploymentEndEventResponse> clusterServiceDeploymentEndEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLUSTERSERVICEDEPLOYMENTEND_EVENT));
        return clusterServiceDeploymentEndEventFlowable(filter);
    }

    public List<ServiceDeploymentEndEventResponse> getServiceDeploymentEndEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SERVICEDEPLOYMENTEND_EVENT, transactionReceipt);
        ArrayList<ServiceDeploymentEndEventResponse> responses = new ArrayList<ServiceDeploymentEndEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ServiceDeploymentEndEventResponse typedResponse = new ServiceDeploymentEndEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nameHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.className = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.versionMajor = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.versionMinor = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.versionPatch = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.nodeId = (String) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ServiceDeploymentEndEventResponse> serviceDeploymentEndEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ServiceDeploymentEndEventResponse>() {
            @Override
            public ServiceDeploymentEndEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SERVICEDEPLOYMENTEND_EVENT, log);
                ServiceDeploymentEndEventResponse typedResponse = new ServiceDeploymentEndEventResponse();
                typedResponse.log = log;
                typedResponse.nameHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.className = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.versionMajor = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.versionMinor = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.versionPatch = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.nodeId = (String) eventValues.getNonIndexedValues().get(4).getValue();
                typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ServiceDeploymentEndEventResponse> serviceDeploymentEndEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SERVICEDEPLOYMENTEND_EVENT));
        return serviceDeploymentEndEventFlowable(filter);
    }

    public RemoteCall<byte[]> stringHash(String name) {
        final Function function = new Function(FUNC_STRINGHASH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<Boolean> nameIsAvailable(String serviceName) {
        final Function function = new Function(FUNC_NAMEISAVAILABLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(serviceName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> hashToName(byte[] hashOfName) {
        final Function function = new Function(FUNC_HASHTONAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(hashOfName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> register(String serviceName, byte[] authorName) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(serviceName), 
                new org.web3j.abi.datatypes.generated.Bytes32(authorName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> delegatedRegister(String serviceName, byte[] authorName, String consentee, byte[] consentSignature) {
        final Function function = new Function(
                FUNC_DELEGATEDREGISTER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(serviceName), 
                new org.web3j.abi.datatypes.generated.Bytes32(authorName), 
                new org.web3j.abi.datatypes.Address(consentee), 
                new org.web3j.abi.datatypes.DynamicBytes(consentSignature)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> release(String serviceName, byte[] authorName, BigInteger versionMajor, BigInteger versionMinor, BigInteger versionPatch, byte[] hash) {
        final Function function = new Function(
                FUNC_RELEASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(serviceName), 
                new org.web3j.abi.datatypes.generated.Bytes32(authorName), 
                new org.web3j.abi.datatypes.generated.Uint256(versionMajor), 
                new org.web3j.abi.datatypes.generated.Uint256(versionMinor), 
                new org.web3j.abi.datatypes.generated.Uint256(versionPatch), 
                new org.web3j.abi.datatypes.DynamicBytes(hash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> delegatedRelease(String serviceName, byte[] authorName, BigInteger versionMajor, BigInteger versionMinor, BigInteger versionPatch, byte[] hash, String consentee, byte[] consentSignature) {
        final Function function = new Function(
                FUNC_DELEGATEDRELEASE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(serviceName), 
                new org.web3j.abi.datatypes.generated.Bytes32(authorName), 
                new org.web3j.abi.datatypes.generated.Uint256(versionMajor), 
                new org.web3j.abi.datatypes.generated.Uint256(versionMinor), 
                new org.web3j.abi.datatypes.generated.Uint256(versionPatch), 
                new org.web3j.abi.datatypes.DynamicBytes(hash), 
                new org.web3j.abi.datatypes.Address(consentee), 
                new org.web3j.abi.datatypes.DynamicBytes(consentSignature)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> announceDeployment(String serviceName, String className, BigInteger versionMajor, BigInteger versionMinor, BigInteger versionPatch, String nodeId) {
        final Function function = new Function(
                FUNC_ANNOUNCEDEPLOYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(serviceName), 
                new org.web3j.abi.datatypes.Utf8String(className), 
                new org.web3j.abi.datatypes.generated.Uint256(versionMajor), 
                new org.web3j.abi.datatypes.generated.Uint256(versionMinor), 
                new org.web3j.abi.datatypes.generated.Uint256(versionPatch), 
                new org.web3j.abi.datatypes.Utf8String(nodeId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> announceClusterDeployment(String serviceName, BigInteger versionMajor, BigInteger versionMinor, BigInteger versionPatch, byte[] hash) {
        final Function function = new Function(
                FUNC_ANNOUNCECLUSTERDEPLOYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(serviceName), 
                new org.web3j.abi.datatypes.generated.Uint256(versionMajor), 
                new org.web3j.abi.datatypes.generated.Uint256(versionMinor), 
                new org.web3j.abi.datatypes.generated.Uint256(versionPatch), 
                new org.web3j.abi.datatypes.DynamicBytes(hash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> announceClusterDeploymentEnd(String serviceName, BigInteger versionMajor, BigInteger versionMinor, BigInteger versionPatch) {
        final Function function = new Function(
                FUNC_ANNOUNCECLUSTERDEPLOYMENTEND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(serviceName), 
                new org.web3j.abi.datatypes.generated.Uint256(versionMajor), 
                new org.web3j.abi.datatypes.generated.Uint256(versionMinor), 
                new org.web3j.abi.datatypes.generated.Uint256(versionPatch)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> announceDeploymentEnd(String serviceName, String className, BigInteger versionMajor, BigInteger versionMinor, BigInteger versionPatch, String nodeId) {
        final Function function = new Function(
                FUNC_ANNOUNCEDEPLOYMENTEND, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(serviceName), 
                new org.web3j.abi.datatypes.Utf8String(className), 
                new org.web3j.abi.datatypes.generated.Uint256(versionMajor), 
                new org.web3j.abi.datatypes.generated.Uint256(versionMinor), 
                new org.web3j.abi.datatypes.generated.Uint256(versionPatch), 
                new org.web3j.abi.datatypes.Utf8String(nodeId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static ServiceRegistry load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ServiceRegistry(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ServiceRegistry load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ServiceRegistry(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ServiceRegistry load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ServiceRegistry(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ServiceRegistry load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ServiceRegistry(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ServiceRegistry> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String userRegistryAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userRegistryAddress)));
        return deployRemoteCall(ServiceRegistry.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<ServiceRegistry> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String userRegistryAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userRegistryAddress)));
        return deployRemoteCall(ServiceRegistry.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ServiceRegistry> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String userRegistryAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userRegistryAddress)));
        return deployRemoteCall(ServiceRegistry.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ServiceRegistry> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String userRegistryAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(userRegistryAddress)));
        return deployRemoteCall(ServiceRegistry.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ServiceCreatedEventResponse {
        public Log log;

        public byte[] nameHash;

        public byte[] author;

        public BigInteger timestamp;
    }

    public static class ServiceReleasedEventResponse {
        public Log log;

        public byte[] nameHash;

        public BigInteger versionMajor;

        public BigInteger versionMinor;

        public BigInteger versionPatch;

        public byte[] hash;

        public BigInteger timestamp;
    }

    public static class ServiceDeploymentEventResponse {
        public Log log;

        public byte[] nameHash;

        public String className;

        public BigInteger versionMajor;

        public BigInteger versionMinor;

        public BigInteger versionPatch;

        public String nodeId;

        public BigInteger timestamp;
    }

    public static class ClusterServiceDeploymentEventResponse {
        public Log log;

        public byte[] nameHash;

        public BigInteger versionMajor;

        public BigInteger versionMinor;

        public BigInteger versionPatch;

        public byte[] hash;

        public BigInteger timestamp;
    }

    public static class ClusterServiceDeploymentEndEventResponse {
        public Log log;

        public byte[] nameHash;

        public BigInteger versionMajor;

        public BigInteger versionMinor;

        public BigInteger versionPatch;

        public BigInteger timestamp;
    }

    public static class ServiceDeploymentEndEventResponse {
        public Log log;

        public byte[] nameHash;

        public String className;

        public BigInteger versionMajor;

        public BigInteger versionMinor;

        public BigInteger versionPatch;

        public String nodeId;

        public BigInteger timestamp;
    }
}
